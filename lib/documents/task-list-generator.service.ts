/**
 * Task List Generator Service
 * Creates actionable DIY checklists with materials and steps
 */

import jsPDF from 'jspdf'

export class TaskListGeneratorService {
  /**
   * Generate a task list as PDF
   */
  generateTaskListPDF(
    projectType: string,
    breakdown: any
  ): Buffer {
    const doc = new jsPDF()
    
    // Add AskToddy logo/branding at the top
    doc.setFillColor(255, 107, 53) // Orange gradient start color
    doc.rect(0, 0, 210, 30, 'F') // Header background
    
    // Logo text
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(24)
    doc.setFont('helvetica', 'bold')
    doc.text('AskToddy', 20, 20)
    
    doc.setFontSize(12)
    doc.setFont('helvetica', 'normal')
    doc.text('Construction Cost Expert', 80, 20)
    
    // Reset colors for document content
    doc.setTextColor(0, 0, 0)
    
    // Document title
    doc.setFontSize(20)
    doc.setFont('helvetica', 'bold')
    doc.text('DIY TASK CHECKLIST', 20, 50)
    
    // Project details
    doc.setFontSize(14)
    doc.setFont('helvetica', 'bold')
    doc.text(`PROJECT: ${projectType.toUpperCase().replace(/_/g, ' ')}`, 20, 70)
    
    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    const totalCost = breakdown.totalCost?.average || breakdown.totalCost || 0
    doc.text(`Estimated Cost: £${totalCost.toLocaleString()} (inc. VAT)`, 20, 80)
    doc.text(`Timeline: ${breakdown.timeline?.map?.((t: any) => t.duration).join(', ') || 'TBD'}`, 20, 87)
    
    // Materials Shopping List
    let yPos = 110
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('MATERIALS SHOPPING LIST', 20, yPos)
    yPos += 15
    
    if (breakdown.materials && breakdown.materials.length > 0) {
      doc.setFontSize(9)
      doc.setFont('helvetica', 'normal')
      breakdown.materials.forEach((item: any) => {
        if (yPos > 270) {
          doc.addPage()
          yPos = 30
        }
        // Checkbox format for shopping
        doc.rect(25, yPos - 3, 3, 3)
        doc.text(`${item.item} - ${item.quantity} ${item.unit} (£${item.totalCost})`, 32, yPos)
        yPos += 7
      })
    }
    
    // Tools Required
    yPos += 10
    if (yPos > 240) {
      doc.addPage()
      yPos = 30
    }
    
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('TOOLS REQUIRED', 20, yPos)
    yPos += 15
    
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    const tools = this.getToolsForProject(projectType)
    tools.forEach(tool => {
      if (yPos > 270) {
        doc.addPage()
        yPos = 30
      }
      doc.rect(25, yPos - 3, 3, 3)
      doc.text(tool, 32, yPos)
      yPos += 7
    })
    
    // Task Steps
    yPos += 10
    if (yPos > 200) {
      doc.addPage()
      yPos = 30
    }
    
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.text('TASK STEPS', 20, yPos)
    yPos += 15
    
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    const tasks = this.getTasksForProject(projectType, breakdown.timeline)
    tasks.forEach((task, index) => {
      if (yPos > 260) {
        doc.addPage()
        yPos = 30
      }
      // Numbered checklist
      doc.rect(25, yPos - 3, 3, 3)
      doc.text(`${index + 1}. ${task}`, 32, yPos)
      yPos += 8
    })
    
    // Safety reminders
    yPos += 10
    if (yPos > 230) {
      doc.addPage()
      yPos = 30
    }
    
    doc.setFontSize(12)
    doc.setFont('helvetica', 'bold')
    doc.setTextColor(255, 0, 0) // Red for safety
    doc.text('⚠️ SAFETY REMINDERS', 20, yPos)
    doc.setTextColor(0, 0, 0)
    yPos += 15
    
    doc.setFontSize(8)
    doc.setFont('helvetica', 'normal')
    const safetyTips = [
      '• Turn off water/electricity before starting work',
      '• Wear appropriate PPE (goggles, gloves, dust mask)',
      '• Ensure adequate ventilation when using chemicals',
      '• Check for asbestos in older properties',
      '• Have a first aid kit readily available'
    ]
    
    safetyTips.forEach(tip => {
      if (yPos > 270) {
        doc.addPage()
        yPos = 30
      }
      doc.text(tip, 25, yPos)
      yPos += 7
    })
    
    // Footer with contact info
    doc.setFontSize(8)
    doc.setTextColor(128, 128, 128)
    doc.text('Tool hire available from Toddy Tool Hire (Suffolk/Essex) - 01394 447658', 20, 285)
    doc.text('Generated by AskToddy AI - asktoddyai.com', 20, 290)
    
    return Buffer.from(doc.output('arraybuffer'))
  }

  private getToolsForProject(projectType: string): string[] {
    const toolsByProject: { [key: string]: string[] } = {
      'bathroom_renovation': [
        'Spirit level',
        'Tile cutter',
        'Drill with masonry bits',
        'Adjustable spanner',
        'Pipe cutter',
        'Grout float',
        'Silicon gun',
        'Multi-tool for cutting'
      ],
      'kitchen_renovation': [
        'Spirit level',
        'Drill with bits',
        'Jigsaw',
        'Circular saw',
        'Router (for worktops)',
        'Adjustable spanner',
        'Screwdriver set',
        'Measuring tape'
      ],
      'kitchen_extension': [
        'Mini digger (hire)',
        'Concrete mixer (hire)',
        'Spirit level (2m)',
        'Angle grinder',
        'SDS drill',
        'Scaffold tower (hire)',
        'Wheelbarrow',
        'Shovels and picks'
      ],
      'loft_conversion': [
        'Reciprocating saw',
        'Circular saw',
        'Spirit level',
        'Nail gun (hire)',
        'Insulation knife',
        'Dust masks',
        'Work lights',
        'Access ladder'
      ]
    }
    
    return toolsByProject[projectType] || [
      'Measuring tape',
      'Spirit level',
      'Drill',
      'Hammer',
      'Screwdriver set',
      'Safety equipment'
    ]
  }

  private getTasksForProject(projectType: string, timeline: any[]): string[] {
    // Generate tasks from timeline phases
    const tasks: string[] = []
    
    if (timeline && timeline.length > 0) {
      timeline.forEach(phase => {
        if (phase.phase) {
          tasks.push(`Complete ${phase.phase.toLowerCase()}`)
        }
        if (phase.tasks && phase.tasks.length > 0) {
          phase.tasks.forEach((task: string) => tasks.push(task))
        }
      })
    }
    
    // Add project-specific tasks if no timeline
    if (tasks.length === 0) {
      const defaultTasks: { [key: string]: string[] } = {
        'bathroom_renovation': [
          'Turn off water supply',
          'Remove old fixtures',
          'Check and repair plumbing',
          'Install new shower/bath',
          'Tile walls',
          'Grout and seal',
          'Install toilet and basin',
          'Connect plumbing',
          'Install accessories',
          'Final clean and test'
        ],
        'kitchen_renovation': [
          'Turn off utilities',
          'Remove old units',
          'Check electrics and plumbing',
          'Install base units',
          'Fit worktops',
          'Install wall units',
          'Connect appliances',
          'Tile splashback',
          'Install sink and taps',
          'Final connections and test'
        ]
      }
      
      return defaultTasks[projectType] || [
        'Prepare work area',
        'Complete first fix',
        'Complete second fix',
        'Finish and decoration',
        'Final inspection'
      ]
    }
    
    return tasks
  }
}

export const taskListGeneratorService = new TaskListGeneratorService()